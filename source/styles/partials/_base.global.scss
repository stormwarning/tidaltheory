/*------------------------------------*\
    #GLOBAL
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box;
}

* {

  &,
  &:before,
  &:after {
    box-sizing: inherit;
  }
}


/**
 * High-, page-level styling.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OS X will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  min-height: 100%; /* [3] */
  overflow-y: scroll; /* [2] */
  font-size: ($base-font-size / 16px) * 1em; /* [1] */
  -webkit-font-smoothing: antialiased; /* [5] */
  -moz-osx-font-smoothing: grayscale; /* [5] */
  line-height: $base-line-height / $base-font-size; /* [1] */
  color: $color-text;
  -webkit-text-size-adjust: 100%; /* [4] */
  -ms-text-size-adjust: 100%; /* [4] */
  background-color: $color-background;
}


/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 * 4. If images must be resized in HTML, let's make sure they look good.
 */
img {
  height: auto;
  max-width: 100%; /* [1] */
  font-style: italic; /* [2] */
  vertical-align: middle; /* [3] */
  -ms-interpolation-mode: bicubic; /* [4] */

  &.alignright {
    float: right;
    margin-bottom: $base-line-height;
    margin-left: $layout-gutter;
  }

  &.alignleft {
    float: left;
    margin-right: $layout-gutter;
    margin-bottom: $base-line-height;
  }
}

p > img {
  margin: 0 auto;
}

// Stop `max-width` from breaking Google Maps images.
.google-map img { max-width: none; }


figure {
  display: inline-block;
  margin: 0;
  margin-bottom: $base-line-height;
  line-height: 0;

  &.alignright {
    float: right;
    margin-bottom: $base-line-height;
    margin-left: $layout-gutter;
  }

  &.alignleft {
    float: left;
    margin-right: $layout-gutter;
    margin-bottom: $base-line-height;
  }

  > figcaption {
    font-family: $font-heading;
    line-height: 2.2;
    border-bottom: 1px dotted rgba($black, 0.4);

    > :last-child { margin-bottom: 0; }
  }
}


/**
 * Layout system
 *
 * @link csswizardry.com/csswizardry-grids/
 */
%layout {
  padding: 0;
  margin: 0;
  margin-left: -$layout-gutter;
  list-style: none;
}

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
%layout-item {
  display: inline-block; /* [1] */
  width: 100%; /* [4] */
  padding-left: $layout-gutter; /* [2] */
  vertical-align: top; /* [3] */
}


/**
 * Micro clearfix.
 *
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 *
 * @link css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 */
%cf {
  &:after {
    display: table;
    clear: both;
    content: "";
  }
}


/**
 * Vertical centering methods.
 *
 * `translateY` method is clean, but can result in half-pixel blurriness.
 * Pseudo-element method is more verbose, but won't return half pixels.
 */
%vertical-center {
  position: relative;
  top: 50%;
  margin-bottom: 0;
  transform: translateY(-50%);
  backface-visibility: hidden;
}

%center-container {
  position: absolute;
  top: 0;
  left: 0;
  display: block;
  width: 100%;
  height: 100%;
  text-align: center;

  &:before {
    display: inline-block;
    height: 100%;
    font-size: 0;
    vertical-align: middle;
    content: "";
  }

  > * {
    display: inline-block;
    max-width: 90%;
    font-size: $base-font-size;
    vertical-align: middle;

    > :last-child {
      margin-bottom: 0;
    }
  }
}


/**
 * Text meant only for screen readers.
 */
%visually-hidden {
  position: absolute !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);

  &:hover,
  &:focus,
  &:active {
    top: 5px;
    left: 5px;
    z-index: 100000; /* Above WP toolbar */
    display: block;
    width: auto;
    height: auto;
    padding: 15px 23px 14px;
    clip: auto !important;
    line-height: normal;
    color: $color-text;
    text-decoration: none;
    background-color: $color-background;
    box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
  }
}
